# Hunter.io API Client Configuration

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "hunter-client"
version = "0.1.0"
description = "Hunter.io API client with FastAPI"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["hunter.io", "api", "email", "fastapi"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Core dependencies
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "pydantic[email]>=2.0",
    "httpx>=0.24.0",
    "python-dotenv>=1.0.0",
]

# Optional dependencies for development
[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-asyncio>=0.21",
    "respx>=0.20",  # Mock httpx requests
    
    # Code quality
    "mypy>=1.0",
    "wemake-python-styleguide>=0.18",
    "black>=23.0",
    "isort>=5.12",
    
    # Documentation
    "mkdocs>=1.4",
    "mkdocs-material>=9.0",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/hunter-client"
"Bug Tracker" = "https://github.com/yourusername/hunter-client/issues"
"Documentation" = "https://github.com/yourusername/hunter-client#readme"

# Package discovery
[tool.setuptools.packages.find]
where = ["src"]
include = ["hunter_client*"]
exclude = ["tests*"]

# ============================================================================
# Testing Configuration
# ============================================================================

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--verbose",
    "--strict-markers",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["src/hunter_client"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false

# ============================================================================
# Type Checking Configuration
# ============================================================================

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
no_implicit_reexport = true
check_untyped_defs = true
strict_optional = true
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
warn_no_return = true
ignore_missing_imports = true
allow_redefinition = false
local_partial_types = true
implicit_reexport = false
show_error_codes = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

# ============================================================================
# Code Formatting Configuration
# ============================================================================

[tool.black]
line-length = 120
target-version = ['py311']
skip-string-normalization = true  # Keep original quotes instead of forcing double quotes
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip_glob = ["*/migrations/*"]
known_first_party = ["hunter_client"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# ============================================================================
# Linting Configuration (for tools that support pyproject.toml)
# ============================================================================

[tool.flake8]
max-line-length = 120
max-complexity = 12
exclude = [".git", "__pycache__", "build", "dist", ".venv", "venv", "*.egg-info"]
# Global ignores from setup.cfg
ignore = [
    "W503",   # Line break before binary operator
    "WPS226",  # Found string literal over-use
    "WPS227",  # Found WPS violation
    "WPS235",  # Found too many imported names from a module
    "WPS473",  # Found too many noqa comments
    "WPS601",  # Found shadowed class attribute
    "DAR101",  # Missing parameter in docstring
    "DAR201",  # Missing return in docstring
    "DAR301",  # Missing yield in docstring
    "DAR401",  # Missing exception in docstring
    "WPS305",  # Found f-string
    "WPS306",  # Found class without a base class
    "WPS431",  # Found nested class
]
# Per-file ignores for specific modules
per-file-ignores = [
    "src/hunter_client/__init__.py:F401,WPS412,WPS410,WPS436",
    "tests/*.py:S101",
    "src/hunter_client/client.py:F401",  # Simplified - removed old complex ignores
    "src/hunter_client/models/*.py:WPS110",  # Allow generic names in models
]